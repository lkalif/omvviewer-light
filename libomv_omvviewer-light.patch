Index: OpenMetaverse/Logger.cs
===================================================================
--- OpenMetaverse/Logger.cs	(revision 2448)
+++ OpenMetaverse/Logger.cs	(working copy)
@@ -169,7 +169,7 @@
         /// <param name="message">The message to log at the DEBUG level to the
         /// current logging engine</param>
         /// <param name="client">Instance of the client</param>
-        [System.Diagnostics.Conditional("DEBUG")]
+        //[System.Diagnostics.Conditional("DEBUG")]
         public static void DebugLog(object message, GridClient client)
         {
             if (Settings.LOG_LEVEL == Helpers.LogLevel.Debug)
Index: OpenMetaverse/GroupManager.cs
===================================================================
--- OpenMetaverse/GroupManager.cs	(revision 2448)
+++ OpenMetaverse/GroupManager.cs	(working copy)
@@ -1124,6 +1124,21 @@
             Client.Network.SendPacket(p);
         }
 
+        /// <summary>Set preferences for recieving group notices and listing group in prfile</summary>
+        /// <param name="groupID">The group to modify user preference on</param>
+        /// <param name="rcv_notices">Weather to recieve group notices from this group</param>
+        /// <param name="show_in_profile">Weather to list this group in your profile</param>        
+        public void setUserGroupFlags(UUID groupID, bool rcv_notices, bool show_in_profile)
+        {
+            SetGroupAcceptNoticesPacket p = new SetGroupAcceptNoticesPacket();
+            p.AgentData.AgentID = Client.Self.AgentID;
+            p.AgentData.SessionID = Client.Self.SessionID;
+            p.Data.GroupID = groupID;
+            p.Data.AcceptNotices = rcv_notices;
+            p.NewData.ListInProfile = show_in_profile;
+            Client.Network.SendPacket(p);
+        }
+
         #region Packet Handlers
 
         private void GroupDataHandler(Packet packet, Simulator simulator)
@@ -1252,6 +1267,10 @@
                         if(groupMemberCache.Count >= members.GroupData.MemberCount)
                             GroupMembersRequests.Remove(members.GroupData.RequestID);
                     }
+
+
+                    if (groupMemberCache.Count >= members.GroupData.MemberCount)
+                        GroupMembersRequests.Remove(members.GroupData.RequestID);
                 }
             }
 
Index: OpenMetaverse/InventoryManager.cs
===================================================================
--- OpenMetaverse/InventoryManager.cs	(revision 2448)
+++ OpenMetaverse/InventoryManager.cs	(working copy)
@@ -787,7 +787,7 @@
         #endregion Events
 
         private GridClient _Client;
-        private Inventory _Store;
+        public Inventory _Store;
         //private Random _RandNumbers = new Random();
         private object _CallbacksLock = new object();
         private uint _CallbackPos;
Index: OpenMetaverse/AppearanceManager.cs
===================================================================
--- OpenMetaverse/AppearanceManager.cs	(revision 2448)
+++ OpenMetaverse/AppearanceManager.cs	(working copy)
@@ -196,7 +196,8 @@
 
             Client.Network.RegisterCallback(PacketType.AgentWearablesUpdate, new NetworkManager.PacketCallback(AgentWearablesUpdateHandler));
             Client.Network.RegisterCallback(PacketType.AgentCachedTextureResponse, new NetworkManager.PacketCallback(AgentCachedTextureResponseHandler));
-            Client.Network.OnDisconnected += new NetworkManager.DisconnectedCallback(Network_OnDisconnected);
+			Client.Network.RegisterCallback(PacketType.RebakeAvatarTextures,new NetworkManager.PacketCallback(RebakeAvatarTexturesHandler));
+			Client.Network.OnDisconnected += new NetworkManager.DisconnectedCallback(Network_OnDisconnected);
         }
 
         private static AssetType WearableTypeToAssetType(WearableType type)
@@ -1104,41 +1105,77 @@
         }
 
         #region Callbacks
-
-        private void AgentCachedTextureResponseHandler(Packet packet, Simulator simulator)
-        {
-            Logger.DebugLog("AgentCachedTextureResponseHandler()", Client);
-            
-            AgentCachedTextureResponsePacket response = (AgentCachedTextureResponsePacket)packet;
+
+		private void RebakeAvatarTexturesHandler(Packet packet, Simulator simulator)
+		{
+			RebakeAvatarTexturesPacket data=(RebakeAvatarTexturesPacket)packet;
+			Logger.Log("Request rebake for :"+data.TextureData.TextureID.ToString(),Helpers.LogLevel.Info);
+			
+			lock (AgentTextures)
+            {
+                for (int i = 0; i < AgentTextures.Length; i++)
+				{    
+					if(AgentTextures[i] == data.TextureData.TextureID)
+					{
+						// Its one of our baked layers, rebake this one
+
+  						  Logger.Log("Rebaking one of our layers",Helpers.LogLevel.Info);
+						  Dictionary<int, float> paramValues = MakeParamValues();
+						  
+						  TextureIndex index = (TextureIndex)i;
+                          BakeType type = Baker.BakeTypeFor(index);					
+						  Baker bake = new Baker(Client, type, 0, paramValues);
+                          UploadBake(bake);
+					}
+				}
+            }
+
+			
+		}
+		
+		private Dictionary<int, float> MakeParamValues()
+		{			
             Dictionary<int, float> paramValues = new Dictionary<int, float>(VisualParams.Params.Count);
-
-	    lock(Wearables.Dictionary)
-	    {
-                // Build a dictionary of appearance parameter indices and values from the wearables
-                foreach (KeyValuePair<int,VisualParam> kvp in VisualParams.Params)
+			
+			foreach (KeyValuePair<int,VisualParam> kvp in VisualParams.Params)
+            {
+                // Only Group-0 parameters are sent in AgentSetAppearance packets
+                if (kvp.Value.Group == 0)
                 {
-                    // Only Group-0 parameters are sent in AgentSetAppearance packets
-                    if (kvp.Value.Group == 0)
+                    bool found = false;
+                    VisualParam vp = kvp.Value;
+
+					// Try and find this value in our collection of downloaded wearables
+                    foreach (WearableData data in Wearables.Dictionary.Values)
                     {
-                        bool found = false;
-                        VisualParam vp = kvp.Value;
-
-                        // Try and find this value in our collection of downloaded wearables
-                        foreach (WearableData data in Wearables.Dictionary.Values)
+                        if (data.Asset.Params.ContainsKey(vp.ParamID))
                         {
-                            if (data.Asset.Params.ContainsKey(vp.ParamID))
-                            {
-                                paramValues.Add(vp.ParamID, data.Asset.Params[vp.ParamID]);
-                                found = true;
-                                break;
-                            }
+                            paramValues.Add(vp.ParamID, data.Asset.Params[vp.ParamID]);
+                            found = true;
+                            break;
                         }
-
-                        // Use a default value if we don't have one set for it
-                        if (!found) paramValues.Add(vp.ParamID, vp.DefaultValue);
                     }
+
+					// Use a default value if we don't have one set for it
+                    if (!found) paramValues.Add(vp.ParamID, vp.DefaultValue);
                 }
             }
+			
+			return paramValues;
+		}
+		
+        private void AgentCachedTextureResponseHandler(Packet packet, Simulator simulator)
+        {
+            Logger.DebugLog("AgentCachedTextureResponseHandler()", Client);
+            
+            AgentCachedTextureResponsePacket response = (AgentCachedTextureResponsePacket)packet;
+            Dictionary<int, float> paramValues;+
+			lock(Wearables.Dictionary)
+			{
+                // Build a dictionary of appearance parameter indices and values from the wearables
+				paramValues=MakeParamValues();	
+			}
             lock (AgentTextures)
             {
                 //If we are here then the user has tried to wear stuff or we are at login
Index: OpenMetaverse/Inventory.cs
===================================================================
--- OpenMetaverse/Inventory.cs	(revision 2448)
+++ OpenMetaverse/Inventory.cs	(working copy)
@@ -145,7 +145,7 @@
 
         private GridClient Client;
         //private InventoryManager Manager;
-        private Dictionary<UUID, InventoryNode> Items = new Dictionary<UUID, InventoryNode>();
+        public Dictionary<UUID, InventoryNode> Items = new Dictionary<UUID, InventoryNode>();
 
         public Inventory(GridClient client, InventoryManager manager)
             : this(client, manager, client.Self.AgentID) { }
Index: OpenMetaverse/Simulator.cs
===================================================================
--- OpenMetaverse/Simulator.cs	(revision 2448)
+++ OpenMetaverse/Simulator.cs	(working copy)
@@ -866,8 +866,8 @@
             // Check if this packet came from the server we expected it to come from
             if (!remoteEndPoint.Address.Equals(((IPEndPoint)buffer.RemoteEndPoint).Address))
             {
-                Logger.Log("Received " + buffer.DataLength + " bytes of data from unrecognized source " +
-                    ((IPEndPoint)buffer.RemoteEndPoint).ToString(), Helpers.LogLevel.Warning, Client);
+               // Logger.Log("Received " + buffer.DataLength + " bytes of data from unrecognized source " +
+                //    ((IPEndPoint)buffer.RemoteEndPoint).ToString(), Helpers.LogLevel.Warning, Client);
                 return;
             }
 
